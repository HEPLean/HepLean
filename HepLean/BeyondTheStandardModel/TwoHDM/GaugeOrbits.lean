/-
Copyright (c) 2024 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import HepLean.BeyondTheStandardModel.TwoHDM.Basic
import HepLean.StandardModel.HiggsBoson.GaugeAction
import Mathlib.LinearAlgebra.Matrix.PosDef
import Mathlib.Analysis.CStarAlgebra.Matrix
/-!

# Gauge orbits for the 2HDM

The main reference for material in this section is https://arxiv.org/pdf/hep-ph/0605184.

-/

namespace TwoHDM

open StandardModel
open ComplexConjugate
open HiggsField
open Manifold
open Matrix
open Complex
open SpaceTime

noncomputable section

/-- For two Higgs fields `Œ¶‚ÇÅ` and `Œ¶‚ÇÇ`, the map from space time to 2 x 2 complex matrices
  defined by `((Œ¶‚ÇÅ^‚Ä†Œ¶‚ÇÅ, Œ¶‚ÇÇ^‚Ä†Œ¶‚ÇÅ), (Œ¶‚ÇÅ^‚Ä†Œ¶‚ÇÇ, Œ¶‚ÇÇ^‚Ä†Œ¶‚ÇÇ))`. -/
def prodMatrix (Œ¶1 Œ¶2 : HiggsField) (x : SpaceTime) : Matrix (Fin 2) (Fin 2) ‚ÑÇ :=
  !![‚ü™Œ¶1, Œ¶1‚ü´_H x, ‚ü™Œ¶2, Œ¶1‚ü´_H x; ‚ü™Œ¶1, Œ¶2‚ü´_H x, ‚ü™Œ¶2, Œ¶2‚ü´_H x]

/-- The 2 x 2 complex matrices made up of components of the two Higgs fields. -/
def fieldCompMatrix (Œ¶1 Œ¶2 : HiggsField) (x : SpaceTime) : Matrix (Fin 2) (Fin 2) ‚ÑÇ :=
  !![Œ¶1 x 0, Œ¶1 x 1; Œ¶2 x 0, Œ¶2 x 1]

/-- The matrix `prodMatrix Œ¶1 Œ¶2 x` is equal to the square of `fieldCompMatrix Œ¶1 Œ¶2 x`. -/
lemma prodMatrix_eq_fieldCompMatrix_sq (Œ¶1 Œ¶2 : HiggsField) (x : SpaceTime) :
    prodMatrix Œ¶1 Œ¶2 x = fieldCompMatrix Œ¶1 Œ¶2 x * (fieldCompMatrix Œ¶1 Œ¶2 x).conjTranspose := by
  rw [fieldCompMatrix]
  trans !![Œ¶1 x 0, Œ¶1 x 1; Œ¶2 x 0, Œ¶2 x 1] *
    !![conj (Œ¶1 x 0), conj (Œ¶2 x 0); conj (Œ¶1 x 1), conj (Œ¶2 x 1)]
  ¬∑ rw [Matrix.mul_fin_two, prodMatrix, innerProd_expand', innerProd_expand', innerProd_expand',
      innerProd_expand']
    funext i j
    fin_cases i <;> fin_cases j <;> ring_nf
  ¬∑ funext i j
    fin_cases i <;> fin_cases j <;> rfl

/-- An instance of `PartialOrder` on `‚ÑÇ` defined through `Complex.partialOrder`. -/
local instance : PartialOrder ‚ÑÇ := Complex.partialOrder

/-- An instance of `NormedAddCommGroup` on `Matrix (Fin 2) (Fin 2) ‚ÑÇ` defined through
  `Matrix.normedAddCommGroup`. -/
local instance : NormedAddCommGroup (Matrix (Fin 2) (Fin 2) ‚ÑÇ) :=
  Matrix.normedAddCommGroup

/-- An instance of `NormedSpace` on `Matrix (Fin 2) (Fin 2) ‚ÑÇ` defined through
  `Matrix.normedSpace`. -/
local instance : NormedSpace ‚Ñù (Matrix (Fin 2) (Fin 2) ‚ÑÇ) := Matrix.normedSpace

/-- The matrix `prodMatrix` is positive semi-definite. -/
lemma prodMatrix_posSemiDef (Œ¶1 Œ¶2 : HiggsField) (x : SpaceTime) :
    (prodMatrix Œ¶1 Œ¶2 x).PosSemidef := by
  rw [Matrix.posSemidef_iff_eq_transpose_mul_self]
  use (fieldCompMatrix Œ¶1 Œ¶2 x).conjTranspose
  simpa using prodMatrix_eq_fieldCompMatrix_sq Œ¶1 Œ¶2 x

/-- The matrix `prodMatrix` is hermitian. -/
lemma prodMatrix_hermitian (Œ¶1 Œ¶2 : HiggsField) (x : SpaceTime) :
    (prodMatrix Œ¶1 Œ¶2 x).IsHermitian := (prodMatrix_posSemiDef Œ¶1 Œ¶2 x).isHermitian

/-- The map `prodMatrix` is a smooth function on spacetime. -/
lemma prodMatrix_smooth (Œ¶1 Œ¶2 : HiggsField) :
    ContMDiff ùìò(‚Ñù, SpaceTime) ùìò(‚Ñù, Matrix (Fin 2) (Fin 2) ‚ÑÇ) ‚ä§ (prodMatrix Œ¶1 Œ¶2) := by
  rw [show ùìò(‚Ñù, Matrix (Fin 2) (Fin 2) ‚ÑÇ) = modelWithCornersSelf ‚Ñù (Fin 2 ‚Üí Fin 2 ‚Üí ‚ÑÇ) from rfl,
    contMDiff_pi_space]
  intro i
  rw [contMDiff_pi_space]
  intro j
  fin_cases i <;> fin_cases j <;>
    simpa only [prodMatrix, Fin.zero_eta, Fin.isValue, of_apply, cons_val', cons_val_zero,
      empty_val', cons_val_fin_one] using smooth_innerProd _ _

/-- The map `prodMatrix` is invariant under the simultanous action of `gaugeAction` on the two Higgs
fields. -/
informal_lemma prodMatrix_invariant where
  deps := [``prodMatrix, ``gaugeAction]

/-- Given any smooth map `f` from spacetime to 2-by-2 complex matrices landing on positive
semi-definite matrices, there exist smooth Higgs fields `Œ¶1` and `Œ¶2` such that `f` is equal to
`prodMatrix Œ¶1 Œ¶2`.

See https://arxiv.org/pdf/hep-ph/0605184
-/
informal_lemma prodMatrix_to_higgsField where
  deps := [``prodMatrix, ``HiggsField, ``prodMatrix_smooth]

end
end TwoHDM
