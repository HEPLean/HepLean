/-
Copyright (c) 2024 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import HepLean.Tensors.OverColor.Basic
import HepLean.Lorentz.Weyl.Two
/-!

## Pauli matrices

-/

namespace PauliMatrix

open Complex
open Lorentz
open Fermion
open TensorProduct
open CategoryTheory.MonoidalCategory

noncomputable section

open Matrix
open MatrixGroups
open Complex
open TensorProduct

/-- The tensor `œÉ^Œº^a^{dot a}` based on the Pauli-matrices as an element of
  `complexContr ‚äó leftHanded ‚äó rightHanded`. -/
def asTensor : (complexContr ‚äó leftHanded ‚äó rightHanded).V :=
  ‚àë i, complexContrBasis i ‚äó‚Çú leftRightToMatrix.symm (œÉSA i)

/-- The expansion of `asTensor` into complexContrBasis basis vectors . -/
lemma asTensor_expand_complexContrBasis : asTensor =
    complexContrBasis (Sum.inl 0) ‚äó‚Çú leftRightToMatrix.symm (œÉSA (Sum.inl 0))
    + complexContrBasis (Sum.inr 0) ‚äó‚Çú leftRightToMatrix.symm (œÉSA (Sum.inr 0))
    + complexContrBasis (Sum.inr 1) ‚äó‚Çú leftRightToMatrix.symm (œÉSA (Sum.inr 1))
    + complexContrBasis (Sum.inr 2) ‚äó‚Çú leftRightToMatrix.symm (œÉSA (Sum.inr 2)) := by
  rfl

/-- The expansion of the pauli matrix `œÉ‚ÇÄ` in terms of a basis of tensor product vectors. -/
lemma leftRightToMatrix_œÉSA_inl_0_expand : leftRightToMatrix.symm (œÉSA (Sum.inl 0)) =
    leftBasis 0 ‚äó‚Çú rightBasis 0 + leftBasis 1 ‚äó‚Çú rightBasis 1 := by
  simp only [Action.instMonoidalCategory_tensorObj_V, Fin.isValue]
  erw [leftRightToMatrix_symm_expand_tmul]
  simp only [œÉSA, Fin.isValue, Basis.coe_mk, œÉSA', œÉ0, of_apply, cons_val', empty_val',
    cons_val_fin_one, Fin.sum_univ_two, cons_val_zero, cons_val_one, head_cons, one_smul, zero_smul,
    add_zero, head_fin_const, zero_add, CategoryTheory.Equivalence.symm_inverse,
    Action.functorCategoryEquivalence_functor, Action.FunctorCategoryEquivalence.functor_obj_obj]

  /-- The expansion of the pauli matrix `œÉ‚ÇÅ` in terms of a basis of tensor product vectors. -/
lemma leftRightToMatrix_œÉSA_inr_0_expand : leftRightToMatrix.symm (œÉSA (Sum.inr 0)) =
    leftBasis 0 ‚äó‚Çú rightBasis 1 + leftBasis 1 ‚äó‚Çú rightBasis 0:= by
  simp only [Action.instMonoidalCategory_tensorObj_V, Fin.isValue]
  erw [leftRightToMatrix_symm_expand_tmul]
  simp only [œÉSA, Fin.isValue, Basis.coe_mk, œÉSA', œÉ1, of_apply, cons_val', empty_val',
    cons_val_fin_one, Fin.sum_univ_two, cons_val_zero, cons_val_one, head_cons, zero_smul, one_smul,
    zero_add, head_fin_const, add_zero, CategoryTheory.Equivalence.symm_inverse,
    Action.functorCategoryEquivalence_functor, Action.FunctorCategoryEquivalence.functor_obj_obj]

/-- The expansion of the pauli matrix `œÉ‚ÇÇ` in terms of a basis of tensor product vectors. -/
lemma leftRightToMatrix_œÉSA_inr_1_expand : leftRightToMatrix.symm (œÉSA (Sum.inr 1)) =
    -(I ‚Ä¢ leftBasis 0 ‚äó‚Çú[‚ÑÇ] rightBasis 1) + I ‚Ä¢ leftBasis 1 ‚äó‚Çú[‚ÑÇ] rightBasis 0 := by
  simp only [Action.instMonoidalCategory_tensorObj_V, Fin.isValue]
  erw [leftRightToMatrix_symm_expand_tmul]
  simp only [œÉSA, Fin.isValue, Basis.coe_mk, œÉSA', œÉ2, of_apply, cons_val', empty_val',
    cons_val_fin_one, Fin.sum_univ_two, cons_val_zero, cons_val_one, head_cons, zero_smul, neg_smul,
    zero_add, head_fin_const, add_zero]

/-- The expansion of the pauli matrix `œÉ‚ÇÉ` in terms of a basis of tensor product vectors. -/
lemma leftRightToMatrix_œÉSA_inr_2_expand : leftRightToMatrix.symm (œÉSA (Sum.inr 2)) =
    leftBasis 0 ‚äó‚Çú rightBasis 0 - leftBasis 1 ‚äó‚Çú rightBasis 1 := by
  simp only [Action.instMonoidalCategory_tensorObj_V, Fin.isValue]
  erw [leftRightToMatrix_symm_expand_tmul]
  simp only [œÉSA, Fin.isValue, Basis.coe_mk, œÉSA', œÉ3, of_apply, cons_val', empty_val',
    cons_val_fin_one, Fin.sum_univ_two, cons_val_zero, cons_val_one, head_cons, one_smul, zero_smul,
    add_zero, head_fin_const, neg_smul, zero_add, CategoryTheory.Equivalence.symm_inverse,
    Action.functorCategoryEquivalence_functor, Action.FunctorCategoryEquivalence.functor_obj_obj]
  rfl

/-- The expansion of `asTensor` into complexContrBasis basis of tensor product vectors. -/
lemma asTensor_expand : asTensor =
    complexContrBasis (Sum.inl 0) ‚äó‚Çú (leftBasis 0 ‚äó‚Çú rightBasis 0)
    + complexContrBasis (Sum.inl 0) ‚äó‚Çú (leftBasis 1 ‚äó‚Çú rightBasis 1)
    + complexContrBasis (Sum.inr 0) ‚äó‚Çú (leftBasis 0 ‚äó‚Çú rightBasis 1)
    + complexContrBasis (Sum.inr 0) ‚äó‚Çú (leftBasis 1 ‚äó‚Çú rightBasis 0)
    - I ‚Ä¢ complexContrBasis (Sum.inr 1) ‚äó‚Çú (leftBasis 0 ‚äó‚Çú rightBasis 1)
    + I ‚Ä¢ complexContrBasis (Sum.inr 1) ‚äó‚Çú (leftBasis 1 ‚äó‚Çú rightBasis 0)
    + complexContrBasis (Sum.inr 2) ‚äó‚Çú (leftBasis 0 ‚äó‚Çú rightBasis 0)
    - complexContrBasis (Sum.inr 2) ‚äó‚Çú (leftBasis 1 ‚äó‚Çú rightBasis 1) := by
  rw [asTensor_expand_complexContrBasis]
  rw [leftRightToMatrix_œÉSA_inl_0_expand, leftRightToMatrix_œÉSA_inr_0_expand,
    leftRightToMatrix_œÉSA_inr_1_expand, leftRightToMatrix_œÉSA_inr_2_expand]
  simp only [Action.instMonoidalCategory_tensorObj_V, CategoryTheory.Equivalence.symm_inverse,
    Action.functorCategoryEquivalence_functor, Action.FunctorCategoryEquivalence.functor_obj_obj,
    Fin.isValue, tmul_add, tmul_neg, tmul_smul, tmul_sub]
  rfl

/-- The tensor `œÉ^Œº^a^{dot a}` based on the Pauli-matrices as a morphism,
  `ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ complexContr ‚äó leftHanded ‚äó rightHanded` manifesting
  the invariance under the `SL(2,‚ÑÇ)` action. -/
def asConsTensor : ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ complexContr ‚äó leftHanded ‚äó rightHanded where
  hom := ModuleCat.ofHom {
    toFun := fun a =>
      let a' : ‚ÑÇ := a
      a' ‚Ä¢ asTensor,
    map_add' := fun x y => by
      simp only [add_smul],
    map_smul' := fun m x => by
      simp only [smul_smul]
      rfl}
  comm M := by
    refine ModuleCat.hom_ext ?_
    refine LinearMap.ext fun x : ‚ÑÇ => ?_
    simp only [Action.instMonoidalCategory_tensorObj_V, Action.instMonoidalCategory_tensorUnit_V,
      Action.tensorUnit_œÅ', CategoryTheory.Category.id_comp, Action.tensor_œÅ', ModuleCat.hom_comp,
      Function.comp_apply]
    change x ‚Ä¢ asTensor =
      (TensorProduct.map (complexContr.œÅ M)
        (TensorProduct.map (leftHanded.œÅ M) (rightHanded.œÅ M))) (x ‚Ä¢ asTensor)
    simp only [Action.instMonoidalCategory_tensorObj_V, _root_.map_smul]
    apply congrArg
    nth_rewrite 2 [asTensor]
    simp only [Action.instMonoidalCategory_tensorObj_V, CategoryTheory.Equivalence.symm_inverse,
      Action.functorCategoryEquivalence_functor, Action.FunctorCategoryEquivalence.functor_obj_obj,
      map_sum, map_tmul]
    symm
    calc _ = ‚àë x, ((complexContr.œÅ M) (complexContrBasis x) ‚äó‚Çú[‚ÑÇ]
      leftRightToMatrix.symm (SL2C.toSelfAdjointMap M (œÉSA x))) := by
          refine Finset.sum_congr rfl (fun x _ => ?_)
          rw [‚Üê leftRightToMatrix_œÅ_symm_selfAdjoint]
          rfl
      _ = ‚àë x, ((‚àë i, (SL2C.toLorentzGroup M).1 i x ‚Ä¢ (complexContrBasis i)) ‚äó‚Çú[‚ÑÇ]
          ‚àë j, leftRightToMatrix.symm ((SL2C.toLorentzGroup M‚Åª¬π).1 x j ‚Ä¢ (œÉSA j))) := by
          refine Finset.sum_congr rfl (fun x _ => ?_)
          rw [SL2CRep_œÅ_basis, SL2C.toSelfAdjointMap_œÉSA]
          simp only [Action.instMonoidalCategory_tensorObj_V, SL2C.toLorentzGroup_apply_coe,
            Fintype.sum_sum_type, Finset.univ_unique, Fin.default_eq_zero, Fin.isValue,
            Finset.sum_singleton, map_inv, lorentzGroupIsGroup_inv, AddSubgroup.coe_add,
            selfAdjoint.val_smul, AddSubgroup.val_finset_sum, map_add, map_sum]
      _ = ‚àë x, ‚àë i, ‚àë j, ((SL2C.toLorentzGroup M).1 i x ‚Ä¢ (complexContrBasis i)) ‚äó‚Çú[‚ÑÇ]
            leftRightToMatrix.symm.toLinearMap ((SL2C.toLorentzGroup M‚Åª¬π).1 x j ‚Ä¢ (œÉSA j)) := by
          refine Finset.sum_congr rfl (fun x _ => ?_)
          rw [sum_tmul]
          refine Finset.sum_congr rfl (fun i _ => ?_)
          rw [tmul_sum]
          rfl
      _ = ‚àë x, ‚àë i, ‚àë j, ((SL2C.toLorentzGroup M).1 i x ‚Ä¢ (complexContrBasis i)) ‚äó‚Çú[‚ÑÇ]
            ((SL2C.toLorentzGroup M‚Åª¬π).1 x j ‚Ä¢ leftRightToMatrix.symm ((œÉSA j))) := by
          refine Finset.sum_congr rfl (fun x _ => (Finset.sum_congr rfl (fun i _ =>
            (Finset.sum_congr rfl (fun j _ => ?_)))))
          simp only [Action.instMonoidalCategory_tensorObj_V, SL2C.toLorentzGroup_apply_coe,
            map_inv, lorentzGroupIsGroup_inv, LinearMap.map_smul_of_tower, LinearEquiv.coe_coe,
            tmul_smul]
      _ = ‚àë x, ‚àë i, ‚àë j, ((SL2C.toLorentzGroup M).1 i x * (SL2C.toLorentzGroup M‚Åª¬π).1 x j)
          ‚Ä¢ ((complexContrBasis i)) ‚äó‚Çú[‚ÑÇ] leftRightToMatrix.symm ((œÉSA j)) := by
          refine Finset.sum_congr rfl (fun x _ => (Finset.sum_congr rfl (fun i _ =>
            (Finset.sum_congr rfl (fun j _ => ?_)))))
          rw [smul_tmul, smul_smul, tmul_smul]
      _ = ‚àë i, ‚àë x, ‚àë j, ((SL2C.toLorentzGroup M).1 i x * (SL2C.toLorentzGroup M‚Åª¬π).1 x j)
          ‚Ä¢ ((complexContrBasis i)) ‚äó‚Çú[‚ÑÇ] leftRightToMatrix.symm ((œÉSA j)) := Finset.sum_comm
      _ = ‚àë i, ‚àë j, ‚àë x, ((SL2C.toLorentzGroup M).1 i x * (SL2C.toLorentzGroup M‚Åª¬π).1 x j)
          ‚Ä¢ ((complexContrBasis i)) ‚äó‚Çú[‚ÑÇ] leftRightToMatrix.symm ((œÉSA j)) :=
            Finset.sum_congr rfl (fun x _ => Finset.sum_comm)
      _ = ‚àë i, ‚àë j, (‚àë x, (SL2C.toLorentzGroup M).1 i x * (SL2C.toLorentzGroup M‚Åª¬π).1 x j)
          ‚Ä¢ ((complexContrBasis i)) ‚äó‚Çú[‚ÑÇ] leftRightToMatrix.symm ((œÉSA j)) := by
          refine Finset.sum_congr rfl (fun i _ => (Finset.sum_congr rfl (fun j _ => ?_)))
          rw [Finset.sum_smul]
      _ = ‚àë i, ‚àë j, ((1 : Matrix (Fin 1 ‚äï Fin 3) (Fin 1 ‚äï Fin 3) ‚Ñù) i j)
        ‚Ä¢ ((complexContrBasis i)) ‚äó‚Çú[‚ÑÇ] leftRightToMatrix.symm ((œÉSA j)) := by
          refine Finset.sum_congr rfl (fun i _ => (Finset.sum_congr rfl (fun j _ => ?_)))
          congr
          change ((SL2C.toLorentzGroup M) * (SL2C.toLorentzGroup M‚Åª¬π)).1 i j = _
          rw [‚Üê SL2C.toLorentzGroup.map_mul]
          simp only [mul_inv_cancel, _root_.map_one, lorentzGroupIsGroup_one_coe]
      _ = ‚àë i, ((1 : Matrix (Fin 1 ‚äï Fin 3) (Fin 1 ‚äï Fin 3) ‚Ñù) i i)
        ‚Ä¢ ((complexContrBasis i)) ‚äó‚Çú[‚ÑÇ] leftRightToMatrix.symm ((œÉSA i)) := by
          refine Finset.sum_congr rfl (fun i _ => ?_)
          refine Finset.sum_eq_single i (fun b _ hb => ?_) (fun hb => ?_)
          ¬∑ simp [one_apply_ne' hb]
          ¬∑ simp only [Finset.mem_univ, not_true_eq_false] at hb
      _ = asTensor := by
        refine Finset.sum_congr rfl (fun i _ => ?_)
        simp only [Action.instMonoidalCategory_tensorObj_V, one_apply_eq, one_smul,
          CategoryTheory.Equivalence.symm_inverse, Action.functorCategoryEquivalence_functor,
          Action.FunctorCategoryEquivalence.functor_obj_obj]

/-- The map `ùüô_ (Rep ‚ÑÇ SL(2,‚ÑÇ)) ‚ü∂ complexContr ‚äó leftHanded ‚äó rightHanded` corresponding
  to Pauli matrices, when evaluated on `1` corresponds to the tensor `PauliMatrix.asTensor`. -/
lemma asConsTensor_apply_one : asConsTensor.hom (1 : ‚ÑÇ) = asTensor := by
  change asConsTensor.hom.hom.toFun (1 : ‚ÑÇ) = asTensor
  simp only [asConsTensor, one_smul]

end
end PauliMatrix
