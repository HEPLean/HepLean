/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import HepLean.PerturbationTheory.FieldStruct.NormalOrder
import HepLean.PerturbationTheory.FieldStruct.TimeOrder
import HepLean.PerturbationTheory.Wick.Signs.KoszulSign
/-!

# Time contractions

We define the state algebra of a field structure to be the free algebra
generated by the states.

-/

namespace FieldStruct
variable {𝓕 : FieldStruct}
open CrAnAlgebra
noncomputable section

namespace OperatorAlgebra

variable (𝓞 : 𝓕.OperatorAlgebra)

def timeContract (φ ψ : 𝓕.States) : 𝓞.A :=
  𝓞.crAnF (ofStateAlgebra (StateAlgebra.timeOrder (StateAlgebra.ofState φ * StateAlgebra.ofState ψ))
  - normalOrder (ofState φ * ofState ψ))

lemma timeContract_eq_smul  (φ ψ : 𝓕.States) : 𝓞.timeContract φ ψ =
   𝓞.crAnF (ofStateAlgebra (StateAlgebra.timeOrder (StateAlgebra.ofState φ * StateAlgebra.ofState ψ))
   + (-1 : ℂ) • normalOrder (ofState φ * ofState ψ)) := by rfl

lemma timeContract_of_timeOrderProp (φ ψ : 𝓕.States) (h : timeOrderProp φ ψ) :
    𝓞.timeContract φ ψ = 𝓞.crAnF (⟨anPart (StateAlgebra.ofState φ), ofState ψ⟩ₛca) := by
  conv_rhs =>
    rw [ofState_eq_crPart_add_anPart]
    rw [map_add, map_add, crAnF_superCommute_anPart_anPart, superCommute_anPart_crPart]
  simp [timeContract]
  rw [StateAlgebra.timeOrder_ofState_ofState_ordered h]
  rw [normalOrder_ofState_mul_ofState]
  rw [map_mul]
  simp
  rw [ofState_eq_crPart_add_anPart, ofState_eq_crPart_add_anPart]
  simp [mul_add, smul_add, add_mul]
  abel_nf

lemma timeContract_of_not_timeOrderProp (φ ψ : 𝓕.States) (h : ¬ timeOrderProp φ ψ) :
    𝓞.timeContract φ ψ = (FieldStatistic.pairedSign (𝓕.statesStatistic φ)) (𝓕.statesStatistic ψ)
    • 𝓞.timeContract ψ φ := by
  rw [timeContract_eq_smul]
  simp only [Int.reduceNeg,  one_smul, map_add]
  rw [map_smul]
  rw [crAnF_normalOrder_ofState_ofState_swap]
  rw [StateAlgebra.timeOrder_ofState_ofState_not_ordered_eq_timeOrder h]
  rw [timeContract_eq_smul]
  simp only [FieldStatistic.instCommGroup.eq_1, map_smul, one_smul, map_add, smul_add]
  rw [smul_smul, smul_smul, mul_comm]

end OperatorAlgebra


end
end FieldStruct
